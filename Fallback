private Column buildArrayStructEnrichmentColumn(Dataset<Row> dataset, FieldMappingConf mappingConf) {
    final List<StructArrayField> structFields = mappingConf.getStructArrayFields();
    final Column primaryCol = dataset.col(mappingConf.getPrimaryFieldName());

    // Build fallback struct for leg1
    final Column fallbackColLeg1 = functions.when(
            dataset.col(structFields.get(0).getMasterContractId()).isNotNull()
                    .and(dataset.col(structFields.get(0).getWeight()).isNotNull()),
            functions.struct(
                    functions.lit("leg1").alias("legId"),
                    dataset.col(structFields.get(0).getMasterContractId()).alias("masterContractId"),
                    dataset.col(structFields.get(0).getWeight()).alias("weight")
            )
    ).otherwise(functions.lit(null));

    // Build fallback struct for leg2
    final Column fallbackColLeg2 = functions.when(
            dataset.col(structFields.get(1).getMasterContractId()).isNotNull()
                    .and(dataset.col(structFields.get(1).getWeight()).isNotNull()),
            functions.struct(
                    functions.lit("leg2").alias("legId"),
                    dataset.col(structFields.get(1).getMasterContractId()).alias("masterContractId"),
                    dataset.col(structFields.get(1).getWeight()).alias("weight")
            )
    ).otherwise(functions.lit(null));

    // Combine fallbacks into one array
    final Column fallbackArray = functions.array(fallbackColLeg1, fallbackColLeg2);

    // Merge primary and fallback
    Column mergedArray = functions.flatten(functions.array(primaryCol, fallbackArray));

    // Deduplicate by legId using transform & map approach
    Column uniqueStructsByLegId = functions.map_values(functions.map_from_entries(
            functions.transform(mergedArray, struct ->
                    functions.struct(struct.getField("legId"), struct)
            )
    ));

    // Return fallback if primary is null/empty, else deduplicated result
    return when(isNullOrEmpty(primaryCol), fallbackArray).otherwise(uniqueStructsByLegId);
}
